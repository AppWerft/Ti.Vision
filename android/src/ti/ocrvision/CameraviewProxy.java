/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti;

import java.io.IOException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.view.GestureDetector;
import android.view.MotionEvent;
import ti.ocrvision.OcrModule.CaptureGestureListener;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;

import com.google.android.gms.vision.text.TextBlock;
import com.google.android.gms.vision.text.TextRecognizer;
import com.teapink.ocr_reader.ui.camera.CameraSource;
import com.teapink.ocr_reader.ui.camera.CameraSourcePreview;
import com.teapink.ocr_reader.ui.camera.GraphicOverlay;
import com.teapink.ocr_reader.utilities.OcrDetectorProcessor;
import com.teapink.ocr_reader.utilities.OcrGraphic;
import com.google.android.gms.common.GoogleApiAvailability;



// This proxy can be created by calling Test.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=OcrModule.class, propertyAccessors = { "onSuccess", "onError" }
)
public class CameraviewProxy extends TiViewProxy 
{
	// Standard Debugging variables
	private static final String LCAT = "TiOCR";
	// Standard Debugging variables
	
		// Intent request code to handle updating play services if needed.
		private static final int RC_HANDLE_GMS = 9001;

		// Constants used to pass extra data in the intent
		public static final String AutoFocus = "AutoFocus";
		public static final String UseFlash = "UseFlash";
		public static final String TextBlockObject = "String";

		private CameraSource cameraSource;
		private CameraSourcePreview preview;
		private GraphicOverlay<OcrGraphic> graphicOverlay;
		private KrollFunction onSuccess;
		private GestureDetector gestureDetector;

	private class ExampleView extends TiUIView
	{
		public ExampleView(TiViewProxy proxy) {
			super(proxy);
			LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
				if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
					arrangement = LayoutArrangement.HORIZONTAL;
				} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
					arrangement = LayoutArrangement.VERTICAL;
				}
			}
			setNativeView(new TiCompositeLayout(proxy.getActivity(), arrangement));
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}


	// Constructor
	public CameraviewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new ExampleView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}

	// Methods
	@Kroll.method
	public void printMessage(String message)
	{
		Log.d(LCAT, "printing message: " + message);
	}


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.d(LCAT, "Tried setting module message to: " + message);
	}
	@Kroll.method
	public void startCamera(KrollDict opts) {
		boolean autoFocus=true;
		boolean useFlash = false;
		
		if (opts.containsKeyAndNotNull("autofocus")) {
			autoFocus= opts.getBoolean("autofocus");
		}
		if (opts.containsKeyAndNotNull("flash")) {
			useFlash = opts.getBoolean("flash");
		}
		
		int code = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
                TiApplication.getAppRootOrCurrentActivity().getApplicationContext());
		createCameraSource(autoFocus, useFlash);
		if (cameraSource != null) {
            try {
                preview.start(cameraSource, graphicOverlay);
            } catch (IOException e) {
                
                cameraSource.release();
                cameraSource = null;
            }
        }
		gestureDetector = new GestureDetector(new CaptureGestureListener());
	    Context context = TiApplication.getAppRootOrCurrentActivity();
        TextRecognizer textRecognizer = new TextRecognizer.Builder(context).build();
        textRecognizer.setProcessor(new OcrDetectorProcessor(graphicOverlay));

        if (!textRecognizer.isOperational()) {
           
           
        }

        cameraSource =
                new CameraSource.Builder(TiApplication.getAppRootOrCurrentActivity().getApplicationContext(), textRecognizer)
                .setFacing(CameraSource.CAMERA_FACING_BACK)
                .setRequestedPreviewSize(1280, 1024)
                .setRequestedFps(2.0f)
                .setFlashMode(useFlash ? Camera.Parameters.FLASH_MODE_TORCH : null)
                .setFocusMode(autoFocus ? Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE : null)
                .build();
    }
	private class CaptureGestureListener extends GestureDetector.SimpleOnGestureListener {

        @Override
        public boolean onSingleTapConfirmed(MotionEvent e) {
            return onTap(e.getRawX(), e.getRawY()) || super.onSingleTapConfirmed(e);
        }
    }
	private boolean onTap(float rawX, float rawY) {
        OcrGraphic graphic = graphicOverlay.getGraphicAtLocation(rawX, rawY);
        TextBlock text = null;
        if (graphic != null) {
            text = graphic.getTextBlock();
            if (text != null && text.getValue() != null) {
            	KrollDict dict = new KrollDict();
            	dict.put("text",text.getValue());
                if (hasProperty("onSuccess")) {
                	onSuccess= (KrollFunction)(getProperty("onSuccess"));
                	onSuccess.callAsync(getKrollObject(), dict);
                }
                if (hasListeners("success")) {
                	fireEvent("success",dict);
                }
                
            }
            else {
                
            }
        }
        else {
            
        }
        return text != null;
    }
}
